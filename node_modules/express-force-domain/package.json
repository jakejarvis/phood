{
  "name": "express-force-domain",
  "version": "0.0.6",
  "description": "Force express 3.x or Connect to use a specific domain. Good for adding or removing www. and handling parked domains that redirect to your main domain.",
  "main": "./lib/express-force-domain.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chovy/express-force-domain.git"
  },
  "keywords": [
    "express",
    "domains",
    "redirect",
    "connect",
    "seo"
  ],
  "author": {
    "name": "Anthony Ettinger",
    "url": "chovy"
  },
  "license": "MIT",
  "readme": "Express Force Domain\n===========\n\nForce Express 3.x or Connect to use a specific domain. Good for adding or removing the www. from your web app and handling parked domains that redirect to your main domain. You just have to pass in the preferred url to your homepage (ie: http://www.example.com).\n\nFor test environments, you need to pass port as well if using something other than port 80. (ie: http://www.example.com:8080).\n\nIf example2.com points to the same IP as example1.com you can handle the redirect using express-force-domain.\n\nInstalling\n----\n\n\tnpm install express-force-domain --save\n\n--save will add the package to your package.json file automatically.\n\nSee the package on npm: https://npmjs.org/package/express-force-domain\n\nUsage with Connect or Express\n----\n\nYou can also use as middleware with connect and app.use(), if you are not using express. \n\nSetup a middleware in app.js before all your other routes are defined, and pass the full url to the homepage as an argument: (including port if other than 80):\n\n\tapp.use( require('express-force-domain')('http://www.example.com') );\n\nor\n\n\tvar\tforce = require('express-force-domain');\n\tapp.use( force('http://www.example.com') );\n\nor alternative port\n\n\tapp.use( force('http://example.com:8080') );\n\nNote, be sure to put the app.use statement above the app.router.\n\n\tvar cfg = require('./config')\n\t, force = require('express-force-domain');\n\n\tapp.use( force(cfg.site_url) );\n\t...\n\tapp.use(app.router);\n\nAlternative:\n\n\tvar site_url = 'http://www.example.com'\n\t, force = require('express-force-domain');\n\n\tapp.use( force(site_url) );\n\n\nor you can pass the url for the homepage manually, (four examples, pick one):\n\n\tapp.use( require('express-force-domain')('http://example.com') );\n\tapp.use( require('express-force-domain')('http://example.com:8080') );\n\tapp.use( require('express-force-domain')('http://www.example.com') );\n\tapp.use( require('express-force-domain')('http://www.example.com:8080') );\n\nFor parked domains you want to redirect, this assumes example2.com points to the same ip as example.com, and you prefer your app live at http://www.example.com:\n\n\tapp.use( require('express-force-domain')('http://www.example.com') );\n\nRequests for http://example2.com, http://www.example2.com, and http://example.com will all redirect to http://www.example.com.\n\nMore info\n----\n\n* http://nodejs.org/\n* http://expressjs.com/\n* http://npmjs.org/\n* http://www.senchalabs.org/connect/\n\nLICENSE\n----\n\n(The MIT License)\n",
  "_id": "express-force-domain@0.0.6",
  "dist": {
    "shasum": "4c3dd010aa49adacddc3e05fc7780c6df9d5d645",
    "tarball": "http://registry.npmjs.org/express-force-domain/-/express-force-domain-0.0.6.tgz"
  },
  "_npmVersion": "1.1.61",
  "_npmUser": {
    "name": "chovy",
    "email": "anthony@chovy.com"
  },
  "maintainers": [
    {
      "name": "chovy",
      "email": "anthony@chovy.com"
    }
  ],
  "directories": {},
  "_shasum": "4c3dd010aa49adacddc3e05fc7780c6df9d5d645",
  "_resolved": "https://registry.npmjs.org/express-force-domain/-/express-force-domain-0.0.6.tgz",
  "_from": "express-force-domain@*"
}
